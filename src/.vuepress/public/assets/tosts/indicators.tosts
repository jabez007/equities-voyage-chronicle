#hint: Trend Advisor Market Phases Swing Trader;

###
# Credits
#  - Chuck Dukas for creating the Market Phases system
#  - the author of VolumeTrendLabels whose study was use to create this indicator.
#
### 

#Ensure you set the correct aggregation period to then chart, this helps calculate the correct volume and price action.
input vPeriod = AggregationPeriod.Day; #hint vPeriod: Enter the chart time you use here. Required to properly caluclate volume and price strength.

def O = open(period = vPeriod);
def H = high(period = vPeriod);
def C = close(period = vPeriod);
def L = low(period = vPeriod);
def V = volume(period = vPeriod);

def SV = V * (H - C) / (H - L);
def BV = V * (C - L) / (H - L);


####
# below determines if volume supports the move, adds conviction
####

def buyerVol = high > high[1] and low > low[1] and BV*1.05 > SV;
AddLabel(yes, " Buyer Vol Strong ", if buyerVol then Color.GREEN else color.black);

def sellerVol = high < high[1] and low < low[1] and SV*1.05 > BV;
AddLabel(yes, " Seller Vol Strong ", if sellerVol then Color.MAGENTA else color.black);


####
# below determines if price supports the move
####

def strongPrice = high > high[1] and high[1] > high[2] and low > low[1] and low[1] > low[2];
AddLabel(yes, " Price Strong ", if strongPrice then Color.GREEN else color.black);

def weakPrice = high < high[1] and high[1] < high[2] and low < low[1] and low[1] < low[2];
AddLabel(yes, " Price Weak ", if weakPrice then Color.MAGENTA else color.black);


####
# Moving Averages used to determine Bullish or Bearish
####

input price = FundamentalType.CLOSE; #hint price: which value to use for the moving averages

input fastavgType = AverageType.EXPONENTIAL;
input fastavg = 50;

input slowavgType = AverageType.SIMPLE;
input slowavg = 200;

plot fastsma = MovingAverage(fastavgType, fundamental(price, period = vPeriod), fastavg);
fastsma.SetDefaultColor(Color.DARK_ORANGE);
fastsma.SetLineWeight(3);

def fastsmaheight = fastsma - fastsma[1];
def fastsmaAngle = Atan(fastsmaheight / fastavg) * 180 / Double.Pi;

plot slowsma = MovingAverage(slowavgType, fundamental(price, period = vPeriod), slowavg);
slowsma.SetDefaultColor(Color.YELLOW);
slowsma.SetLineWeight(5);

def slowsmaheight = slowsma - slowsma[1];
def slowsmaAngle = Atan(slowsmaheight / slowavg) * 180 / Double.Pi;


####
# Bullish criteria define below
####

# Define criteria for Bullish Phase : close > 50 SMA, close > 200 SMA, 50 SMA > 200 SMA

def bullphase = (
    fastsma > slowsma
    &&
    (fastsmaAngle > 0) && (slowsmaAngle > 0)
    && 
    fundamental(price, period = vPeriod) > fastsma 
    &&
    fundamental(price, period = vPeriod) > slowsma
);

# Define criteria for Accumulation Phase : close > 50 SMA, close > 200 SMA, 50 SMA < 200 SMA

def accphase = (
    fastsma < slowsma
    &&
    (fastsmaAngle > 0) && (slowsmaAngle >= 0)
    &&
    fundamental(price, period = vPeriod) > fastsma
    &&
    fundamental(price, period = vPeriod) > slowsma
);

# Define criteria for Recovery Phase : close > 50 SMA, close < 200 SMA, 50 SMA < 200 SMA

def recphase = (
    fastsma < slowsma
    &&
    (fastsmaAngle >= 0) && (slowsmaAngle < 0)
    &&
    fundamental(price, period = vPeriod) < slowsma
    &&
    fundamental(price, period = vPeriod) > fastsma
);


####
# Bearish Criteria define below
####

# Define criteria for Bearish Phase : close < 50 SMA, close < 200 SMA, 50 SMA < 200 SMA

def bearphase = (
    fastsma < slowsma
    &&
    (fastsmaAngle < 0) && (slowsmaAngle < 0)
    &&
    fundamental(price, period = vPeriod) < fastsma
    &&
    fundamental(price, period = vPeriod) < slowsma
);

# Define criteria for Distribution Phase : close < 50 SMA, close < 200 SMA, 50 SMA > 200 SMA

def distphase = (
    fastsma > slowsma
    &&
    (fastsmaAngle < 0) && (slowsmaAngle <= 0)
    &&
    fundamental(price, period = vPeriod) < fastsma
    &&
    fundamental(price, period = vPeriod) < slowsma
);

# Define criteria for Warning Phase : close < 50 SMA, close > 200 SMA, 50 SMA > 200 SMA

def warnphase = (
    fastsma > slowsma
    &&
    (fastsmaAngle <= 0) && (slowsmaAngle > 0)
    &&
    fundamental(price, period = vPeriod) > slowsma
    &&
    fundamental(price, period = vPeriod) < fastsma
);

####
#plot buphase = bullphase is true;
#plot acphase = accphase is true;
#plot rephase = recphase is true;
####
#plot bephase = bearphase is true;
#plot dphase = distphase is true;
#plot wphase = warnphase is true;
####


####
# The conditions below are for possible entries when price pulls back
# Inspired by the Bravo9
####

input pbfastavgType = AverageType.SIMPLE; #hint pbfastavgType: The fast moving average type to use for pullback entries.
input pbfastavg = 9; #hint pbfastavg: The length of the fast moving average to use for pullback entries.
input pbfastdisplace = 0; #hint pbfastdisplace: The displacement of the fast moving average to use for pullback entries.

plot pbfastsma = MovingAverage(pbfastavgType, data = fundamental(price, period = vPeriod)[-pbfastdisplace], length = pbfastavg);
pbfastsma.SetDefaultColor(Color.LIME);
pbfastsma.SetLineWeight(2);

input pbslowavgType = AverageType.EXPONENTIAL; #hint pbslowavgType: The slow moving average type to use for pullback entries.
input pbslowavg = 20; #hint pbslowavg: The length of the slow moving average to use for pullback entries.
input pbslowdisplace = 0; #hint pbslowdisplace: The displacement of the slow moving average to use for pullback entries.

plot pbslowsma = MovingAverage(pbslowavgType, data = fundamental(price, period = vPeriod)[-pbslowdisplace], length = pbslowavg);
pbslowsma.SetDefaultColor(Color.VIOLET);
pbslowsma.SetLineWeight(3);

input MACDfastLength = 12;
input MACDslowLength = 26;
input MACDLength = 9;
input MACDaverageType = AverageType.EXPONENTIAL;
input MACDlookback = 5;

def MACDline = MovingAverage(MACDaverageType, fundamental(price, period = vPeriod), MACDfastLength) - MovingAverage(MACDaverageType, fundamental(price, period = vPeriod), MACDslowLength);
def MACDsig = MovingAverage(MACDaverageType, MACDline, MACDLength);

def MACDhist = MACDline - MACDsig;

input RSIlength = 14;
input RSIaverageType = AverageType.WILDERS;

def NetChgAvg = MovingAverage(RSIaverageType, fundamental(price, period = vPeriod) - fundamental(price, period = vPeriod)[1], RSIlength);
def TotChgAvg = MovingAverage(RSIaverageType, AbsValue(fundamental(price, period = vPeriod) - fundamental(price, period = vPeriod)[1]), RSIlength);
def ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;
def RSI = 50 * (ChgRatio + 1);

input avgRSIlength = 3;
input avgRSIaverageType = AverageType.WILDERS;

def avgRSI = MovingAverage(avgRSIaverageType, RSI, avgRSIlength);

####

def bullishpb = (
    Min(fundamental(FundamentalType.OPEN, period = vPeriod), fundamental(FundamentalType.CLOSE, period = vPeriod)) > pbfastsma # full candle close above
    &&
    (MACDhist > 0 && Lowest(MACDhist[1], MACDlookback) < 0) # recent positive cross on the MACD
    &&
    (RSI > 40 && avgRSI > avgRSI[1]) # bullish and rising RSI
);
def bullpb = (
    if (bullphase) then (
        #(pbfastavg < pbslowavg or buyerVol)
        #&&
        bullishpb
    ) else if (accphase) then (
        bullishpb
    ) else if (recphase) then (
        #strongPrice
        #&&
        bullishpb
    ) else (
        !bearphase && !distphase && !warnphase && (pbfastavg < pbslowavg) && bullishpb
    )
);

def bearishpb = (
    Max(fundamental(FundamentalType.OPEN, period = vPeriod), fundamental(FundamentalType.CLOSE, period = vPeriod)) < pbfastsma # full candle close below
    &&
    (MACDhist < 0 && Highest(MACDhist[1], MACDlookback) > 0) # recent negative cross on the MACD
    &&
    (RSI < 60 && avgRSI < avgRSI[1]) # bearish and falling RSI
);
def bearpb = (
    if (bearphase) then (
        #(pbfastavg > pbslowavg or sellerVol)
        #&&
        bearishpb
    ) else if (distphase) then (
        bearishpb
    ) else if (warnphase) then (
        #weakPrice
        #&&
        bearishpb
    ) else (
       !bullphase && !accphase && !recphase && (pbfastavg > pbslowavg) && bearishpb
    )
);

####
# The conditions below are for stop losses
# Inspired by the Accurate Swing Trading System
####

input stplength = 3;
input stpdisplace = -1;

def stpDailyHigh = Highest(high(period = vPeriod)[-stpdisplace], stplength);
def stpDailyLow = Lowest(low(period = vPeriod)[-stpdisplace], stplength);

def UT9X = compoundValue(1, if (close(period = vPeriod) > close(period = vPeriod)[4]) then UT9X[1] + 1 else 0, 0);
plot UT9 = (
    if (UT9X == 1 && !isNaN(UT9X[-8]) && UT9X[-8] == 9) then UT9X
    else if (UT9X == 2 && !isNaN(UT9X[-7]) && UT9X[-7] == 9) then UT9X
    else if (UT9X == 3 && !isNaN(UT9X[-6]) && UT9X[-6] == 9) then UT9X
    else if (UT9X == 4 && !isNaN(UT9X[-5]) && UT9X[-5] == 9) then UT9X
    else if (UT9X == 5 && !isNaN(UT9X[-4]) && UT9X[-4] == 9) then UT9X
    else if (UT9X == 6 && !isNaN(UT9X[-3]) && UT9X[-3] == 9) then UT9X
    else if (UT9X == 7 && !isNaN(UT9X[-2]) && UT9X[-2] == 9) then UT9X
    else if (UT9X == 8 && !isNaN(UT9X[-1]) && UT9X[-1] == 9) then UT9X
    else if (UT9X >= 9) then UT9X
    else Double.NaN
);
UT9.SetPaintingStrategy(PaintingStrategy.Values_Above);
UT9.AssignValueColor(if UT9 < 9 then Color.CYAN else Color.MAGENTA);

def DT9X = compoundValue(1, if (close(period = vPeriod) < close(period = vPeriod)[4]) then DT9X[1] + 1 else 0, 0);
plot DT9 = (
    if (DT9X == 1 && !isNaN(DT9X[-8]) && DT9X[-8] == 9) then DT9X
    else if (DT9X == 2 && !isNaN(DT9X[-7]) && DT9X[-7] == 9) then DT9X
    else if (DT9X == 3 && !isNaN(DT9X[-6]) && DT9X[-6] == 9) then DT9X
    else if (DT9X == 4 && !isNaN(DT9X[-5]) && DT9X[-5] == 9) then DT9X
    else if (DT9X == 5 && !isNaN(DT9X[-4]) && DT9X[-4] == 9) then DT9X
    else if (DT9X == 6 && !isNaN(DT9X[-3]) && DT9X[-3] == 9) then DT9X
    else if (DT9X == 7 && !isNaN(DT9X[-2]) && DT9X[-2] == 9) then DT9X
    else if (DT9X == 8 && !isNaN(DT9X[-1]) && DT9X[-1] == 9) then DT9X
    else if (DT9X >= 9) then DT9X
    else Double.NaN
);
DT9.SetPaintingStrategy(PaintingStrategy.Values_Below);
DT9.AssignValueColor(if DT9 < 9 then Color.MAGENTA else Color.CYAN);

####

def bullstp = 0; #(
#    (
#        (
#            Max(fundamental(FundamentalType.OPEN, period = vPeriod), fundamental(FundamentalType.CLOSE, period = vPeriod)) < pbfastsma # full candle close below 
#            or
#            fundamental(FundamentalType.CLOSE, period = vPeriod) < pbslowsma # close below
#        )
#        &&
#       (MACDhist <= MACDhist[1]) # MACD not rising
#    )
#    or
#    close(period = vPeriod) < stpDailyLow    
#);

def bearstp = 0; #(
#    (
#        (
#            Min(fundamental(FundamentalType.OPEN, period = vPeriod), fundamental(FundamentalType.CLOSE, period = vPeriod)) > pbfastsma # full candle close above
#            or
#            fundamental(FundamentalType.CLOSE, period = vPeriod) > pbslowsma # close above
#        )
#        &&
#        (MACDhist >= MACDhist[1]) # MACD not falling
#    )
#    or
#    close(period = vPeriod) > stpDailyHigh
#);

####

input trailType = {default modified, unmodified};
input ATRPeriod = 5;
input ATRFactor = 2.1;
input ATRAverageType = AverageType.WILDERS;

Assert(ATRFactor > 0, "'atr factor' must be positive: " + ATRFactor);

def HiLo = Min(high(period = vPeriod) - low(period = vPeriod), 1.5 * Average(high(period = vPeriod) - low(period = vPeriod), ATRPeriod));
def HRef = if low(period = vPeriod) <= high(period = vPeriod)[1]
    then high(period = vPeriod) - close(period = vPeriod)[1]
    else (high(period = vPeriod) - close(period = vPeriod)[1]) - 0.5 * (low(period = vPeriod) - high(period = vPeriod)[1]);
def LRef = if high(period = vPeriod) >= low(period = vPeriod)[1]
    then close(period = vPeriod)[1] - low(period = vPeriod)
    else (close(period = vPeriod)[1] - low(period = vPeriod)) - 0.5 * (low(period = vPeriod)[1] - high(period = vPeriod));

def trueRange;
switch (trailType) {
    case modified:
        trueRange = Max(HiLo, Max(HRef, LRef));
    case unmodified:
        trueRange = TrueRange(high(period = vPeriod), close(period = vPeriod), low(period = vPeriod));
}
def loss = ATRFactor * MovingAverage(ATRAverageType, trueRange, ATRPeriod);


#######################################
##  Maintain the position of trades
#######################################

def CurrentPosition;  # holds whether flat = 0 long = 1 short = -1
def trail;

if ((BarNumber() == 1) OR isNaN(CurrentPosition[1])) {
    CurrentPosition = 0;
    trail = Double.NaN;
} else {
    if (CurrentPosition[1] == 0) {               # FLAT
        if (bullpb) {
            CurrentPosition = 1;
            trail = close(period = vPeriod) - loss;
        } else if (bearpb){
            CurrentPosition = -1;
            trail = close(period = vPeriod) + loss;
        } else {
            CurrentPosition = CurrentPosition[1];
            trail = trail[1];
        }
    } else if (CurrentPosition[1] == 1) {        # LONG
        if (bearpb){
            CurrentPosition = -1;
            trail = close(period = vPeriod) + loss;
        } else if (bullstp or close(period = vPeriod) <= trail[1]){
            CurrentPosition = 0;
            trail = Double.NaN;
        } else {
            CurrentPosition = CurrentPosition[1];
            trail = Max(trail[1], close(period = vPeriod) - loss);
        }
    } else if (CurrentPosition[1] == -1) {       # SHORT
        if (bullpb){
            CurrentPosition = 1;
            trail = close(period = vPeriod) - loss;
        } else if (bearstp or close(period = vPeriod) >= trail[1]){
            CurrentPosition = 0;
            trail = Double.NaN;
        } else {
            CurrentPosition = CurrentPosition[1];
            trail = Min(trail[1], close(period = vPeriod) + loss);
        }
    } else {
        CurrentPosition = CurrentPosition[1];
        trail = trail[1];
    }
}

def isLong  = if CurrentPosition == 1 then 1 else 0;
def isShort = if CurrentPosition == -1 then 1 else 0;
def isFlat  = if CurrentPosition == 0 then 1 else 0;

plot TrailingStop = trail;
TrailingStop.SetPaintingStrategy(PaintingStrategy.POINTS);
TrailingStop.AssignValueColor(if isLong then Color.MAGENTA else if isShort then Color.CYAN else Color.GRAY);

input useAlerts = no;

# If not already long and get a BuySignal
Plot BuySig = if (!isLong[1] and bullpb) then 1 else 0;
BuySig.AssignValueColor(color.CYAN);
BuySig.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
BuySig.SetLineWeight(5);

Alert(BuySig and useAlerts, "Buy Signal", Alert.bar, sound.Ding);
Alert(BuySig and useAlerts, "Buy Signal", Alert.bar, sound.Ding);

# If not already short and get a SellSignal
Plot SellSig = if (!isShort[1] and bearpb) then 1 else 0;
SellSig.AssignValueColor(color.MAGENTA);
SellSig.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
SellSig.SetLineWeight(5);

Alert(SellSig and useAlerts, "Sell Signal", Alert.bar, sound.Ding);
Alert(SellSig and useAlerts, "Sell Signal", Alert.bar, sound.Ding);

# If long and get a BuyStop
Plot BuyStpSig = if ((bullstp or close(period = vPeriod) <= trail[1]) and isLong[1]) then 1 else 0;
BuyStpSig.AssignValueColor(color.LIGHT_GRAY);
BuyStpSig.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
BuyStpSig.SetLineWeight(3);

# If short and get a SellStop
Plot SellStpSig = if ((bearstp or close(period = vPeriod) >= trail[1]) and isShort[1]) then 1 else 0;
SellStpSig.AssignValueColor(color.LIGHT_GRAY);
SellStpSig.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
SellStpSig.SetLineWeight(3);


####
# Below adds labels to the chart to identify what phase the underlying is in
####

AddLabel(bullphase, " Bull Phase " , if bullphase is true then Color.GREEN else Color.BLACK);

AddLabel(accphase, " Accumation Phase ", if accphase is true then Color.LIGHT_GREEN else Color.BLACK);

AddLabel(recphase, " Recovery Phase ", if recphase is true then Color.LIGHT_ORANGE else Color.BLACK);

AddLabel(warnphase, " Warning Phase ", if warnphase is true then Color.ORANGE else Color.BLACK);

AddLabel(distphase, " Distribution Phase ", if distphase is true then Color.LIGHT_RED else Color.BLACK);

AddLabel(bearphase, " Bear Phase ", if bearphase is true then Color.RED else Color.BLACK);


#### spacer
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
addlabel(yes, "            ", color.BLACK);
#### end spacer code

#######################################
##  Orders
#######################################

def isOrder = if CurrentPosition == CurrentPosition[1] then 0 else 1; # Position changed so it's a new order

# If there is an order to open, then the price is the next day's open
def orderPrice = if (isOrder and (bullpb or bearpb)) then open(period = vPeriod)[-1] else orderPrice[1];


#######################################
##  Price and Profit
#######################################

def profitLoss;

if (!isOrder or orderPRice == 0){
    profitLoss = 0;
# If there is an order to close, 
} else if ((isOrder and isLong[1]) and (SellSig or BuyStpSig)){
    profitLoss = open(period = vPeriod)[-1] - orderPrice; # then the price is the next day's open
} else if ((isOrder and isShort[1]) and (BuySig or SellStpSig)) {
    profitLoss = orderPrice - open(period = vPeriod)[-1]; # then the price is the next day's open
} else {
    profitLoss = 0;
}

# Total Profit or Loss
def profitLossSum = compoundValue(1, if isNaN(isOrder)  or barnumber()==1 then 0 else if isOrder then profitLossSum[1] + profitLoss else profitLossSum[1], 0);

# How many trades won or lost
def profitWinners = compoundValue(1, if isNaN(profitWinners[1]) or barnumber()==1 then 0 else if isOrder and profitLoss > 0 then profitWinners[1] + 1 else profitWinners[1], 0);
def profitLosers = compoundValue(1, if isNaN(profitLosers[1])  or barnumber()==1 then 0 else if isOrder and profitLoss < 0 then profitLosers[1] + 1 else profitLosers[1], 0);
def profitPush = compoundValue(1, if isNaN(profitPush[1])  or barnumber()==1 then 0 else if isOrder and profitLoss == 0 then profitPush[1] + 1 else profitPush[1], 0);

def orderCount = (profitWinners + profitLosers + profitPush) - 1;

# Current Open Trade Profit or Loss
def TradePL = If isLong then Round(((close - orderprice)/TickSize())*TickValue()) else if isShort then Round(((orderPrice - close)/TickSize())*TickValue()) else 0;

# Convert to actual dollars based on Tick Value for bubbles
def dollarProfitLoss = if orderPRice[1]==0 or isNaN(orderPrice[1]) then 0 else round((profitLoss/Ticksize())*Tickvalue());

# Closed Orders dollar P/L
def dollarPLSum = round((profitLossSum/Ticksize())*Tickvalue());

# Split profits or losses by long and short trades
def profitLong = compoundValue(1, if isNan(profitLong[1])  or barnumber()==1 then 0 else if isOrder and isLong[1] then profitLong[1]+dollarProfitLoss else profitLong[1],0);
def profitShort = compoundValue(1, if isNan(profitShort[1])  or barnumber()==1 then 0 else if isOrder and isShort[1] then profitShort[1]+dollarProfitLoss else profitShort[1],0);
def countLong = compoundValue(1, if isNaN(countLong[1])  or barnumber()==1 then 0 else if isOrder and isLong[1] then countLong[1]+1 else countLong[1],0);
def countShort = compoundValue(1, if isNaN(countShort[1])  or barnumber()==1 then 0 else if isOrder and isShort[1] then countShort[1]+1 else countShort[1],0);

# What was the biggest winning and losing trade
def biggestWin = compoundValue(1, if isNaN(biggestWin[1]) or barnumber()==1 then 0 else if isOrder and (dollarProfitLoss > 0) and (dollarProfitLoss > biggestWin[1]) then dollarProfitLoss else biggestWin[1], 0);
def biggestLoss = compoundValue(1, if isNaN(biggestLoss[1]) or barnumber()==1 then 0 else if isOrder and (dollarProfitLoss < 0) and (dollarProfitLoss < biggestLoss[1]) then dollarProfitLoss else biggestLoss[1], 0);

# What percent were winners
def PCTWin = round((profitWinners/orderCount)*100,2);

# Average trade
def avgTrade = round((dollarPLSum/orderCount),2);


#######################################
##  Create Labels
#######################################

input showLabels = yes;

AddLabel(showLabels, GetSymbol()+" Tick Size: "+TickSize()+" Value: "+TickValue(), color.white);
AddLabel(showLabels, "Closed Orders: " + orderCount + " P/L: " + AsDollars(dollarPLSum), if dollarPLSum > 0 then Color.GREEN else if dollarPLSum< 0 then Color.RED else Color.GRAY);
AddLabel(if !IsNan(orderPrice) and showLabels then 1 else 0, "Closed+Open P/L: "+ AsDollars(TradePL+dollarPLSum), if ((TradePL+dollarPLSum) > 0) then color.green else if ((TradePL+dollarPLSum) < 0) then color.red else color.gray);

AddLabel(showLabels, "Avg per Trade: "+ AsDollars(avgTrade), if avgTrade > 0 then Color.Green else if avgTrade < 0 then Color.RED else Color.GRAY);
AddLabel(showLabels, "Winners: "+ PCTWin +"%",if PCTWin > 50 then color.green else if PCTWin > 40 then color.yellow else color.gray);

AddLabel(showLabels, "MaxUp: "+ AsDollars(biggestWin) +" MaxDown: "+AsDollars(biggestLoss), color.white);
AddLabel(showLabels, "Long Profit: " +AsDollars(profitLong), if profitLong > 0 then color.green else if profitLong < 0 then color.red else color.gray);
AddLabel(showLabels, "Short Profit: " +AsDollars(profitShort), if profitShort > 0 then color.green else if profitShort < 0 then color.red else color.gray);
AddLabel(if !IsNan(CurrentPosition) and showLabels then 1 else 0, "Open: "+ (If isLong then "Bought" else "Sold") + " @ "+orderPrice, color.white);
AddLabel(if !IsNan(orderPrice) and showLabels then 1 else 0, "Open Trade P/L: "+ AsDollars(TradePL), if (TradePL > 0) then color.green else if (TradePl < 0) then color.red else color.gray);


#######################################
##  Chart Bubbles for Profit/Loss
#######################################

input showBubbles = yes;

AddChartBubble(showBubbles and isOrder and isLong[1], low, "$"+dollarProfitLoss, if dollarProfitLoss == 0 then Color.LIGHT_GRAY else if dollarProfitLoss > 0 then Color.GREEN else color.Red, 0);
AddChartBubble(showBubbles and isOrder and isShort[1], high,  "$"+dollarProfitLoss, if dollarProfitLoss == 0 then Color.LIGHT_GRAY else if dollarProfitLoss > 0 then Color.GREEN else color.Red, 1);



####
assignPriceColor(if bullphase then Color.GREEN else if bearphase then Color.RED else if (accphase or distphase or recphase or warnphase) then Color.ORANGE else Color.GRAY);